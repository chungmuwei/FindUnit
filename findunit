#!/usr/bin/env python3

import sys, os
from args import *
from unit import *
from crawl import *

##############
### Driver ###
##############

def run():
	# 1. parse arguments
	args = get_args()
	# print(args)

	# 2. assign variables
	unit_code_ls = args.unitcode
	year = args.year
	is_remote = args.remote
	output_filename = None
	output_file_base = None
	output_file_extention = None
	ext = None
	if args.output != None:
		output_filename = args.output
		aux = output_filename.split('.')
		output_file_base = ''.join(aux[:-1])
		output_file_extention = aux[-1]
		ext = output_file_extention
		if output_file_extention == "pdf":
			ext = "md"

	# 2. Verify output file extention if output option was selected
	if output_filename != None and not valid_filename(output_filename):
		sys.stderr.write(f"Invalid output file extension: {output_file_extention}\n")
		exit(2)
	
	invalid_unit_code_ls = []

	# 3. Iterate over all unit outine urls
	for unit_code in unit_code_ls:
		# append invalid unit of study code to the list
		if not valid_unitcode(unit_code):
			invalid_unit_code_ls.append(unit_code)
			continue
		# find unit outline url
		
		outline_url_ls = get_unit_outline_url(unit_code, year, is_remote)
		
		# no unit outline found for this unit
		if len(outline_url_ls) == 0:
			continue
		index = -1
		# more than one unit outlines found ofr this unit
		if len(outline_url_ls) > 1:
			print(f"{unit_code} is provided in multiple session in {year}.")
			for i in range(len(outline_url_ls)):
				print(f"{i}: {outline_url_ls[i].split('/')[-1]}")
			### error handling
			valid_index = False	# flag
			while not valid_index:
				try:
					index = int(input("Please enter the index of the session you want to find: "))
					if index < 0 or index >= len(outline_url_ls):
						print("The index is out of range!")
					else:
						valid_index = True
				except ValueError:
					print("The index must be a non-negative integer!")


		
	
		# create unit object
		my_unit = unit(outline_url_ls[index])

		# Print unit infomation to stdout
		if output_filename == None:
			print(my_unit)

		# Write to output file (txt or md)
		else:
			with open(f"{os.getcwd()}/{output_file_base}.{ext}", "a") as f:
				if output_file_extention == "txt":
					f.write(my_unit.__str__())
				else:
					f.write(my_unit.markdown())

	# 4. Convert markdown to pdf using pandoc 
	if output_file_extention == "pdf":
		os.system(f"pandoc {os.getcwd()}/{output_file_base}.md -o {os.getcwd()}/{output_filename}")
		# TODO
		# delete markdown file



	# 5. Print error message for invalid unit of study code
	if len(invalid_unit_code_ls) > 0:
		print(f"Invalid unit of study code: {invalid_unit_code_ls.__str__()}")
		print()
		print("A valid unit of study code consists of 8 characters.")
		print("The first 4 are alphabets and the last 4 are numbers.")
		exit(2)


if __name__ == "__main__":
	run()
		